from flask import Flask, request
import telebot
import os
import random
import time
import datetime
import json

TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

HISTORICO_PATH = "historico_madonna.json"

try:
    with open(HISTORICO_PATH, "r") as f:
        historico = json.load(f)
except:
    historico = {"insultos": {}, "elogios": {}}

def atualizar_historico(tipo, frase):
    hoje = datetime.datetime.now().strftime("%Y-%m-%d")
    if tipo not in historico:
        historico[tipo] = {}
    if hoje not in historico[tipo]:
        historico[tipo][hoje] = []
    historico[tipo][hoje].append(frase)

    # MantÃ©m apenas os Ãºltimos 3 dias (hoje + 2 anteriores)
    dias_validos = sorted(historico[tipo].keys())[-3:]
    historico[tipo] = {k: historico[tipo][k] for k in dias_validos}

    with open(HISTORICO_PATH, "w") as f:
        json.dump(historico, f)

def obter_nao_usadas(frases, tipo):
    usadas = []
    for dia in historico.get(tipo, {}):
        usadas.extend(historico[tipo][dia])
    return [f for f in frases if f not in usadas]

# 50 insultos engraÃ§ados para rapazes
insultos_rapazes = [
    "VocÃª Ã© o motivo do grupo ter que ativar o modo silencioso.",
    "Com essa autoestima aÃ­, jÃ¡ tentou stand-up?",
    "Nem o Google acha sentido no que vocÃª diz.",
    "Tenta de novo, mas dessa vez com dignidade.",
    "Seu charme Ã© igual Wi-Fi ruim: some quando mais precisa.",
    "Se beleza fosse crime... vocÃª estaria livre pra sempre.",
    "VocÃª Ã© o equivalente humano a uma notificaÃ§Ã£o de antivÃ­rus.",
    "Ã‰ tanta opiniÃ£o sem noÃ§Ã£o que parece rÃ¡dio sem antena.",
    "Quando vocÃª fala, atÃ© o silÃªncio sente vergonha.",
    "Se eu quisesse ouvir besteira, eu falava com um papagaio.",
    "Tem dias que vocÃª Ã© insuportÃ¡vel. Hoje Ã© um deles.",
    "VocÃª Ã© a prova viva de que o cringe venceu.",
    "Sua existÃªncia Ã© um bug na Matrix da elegÃ¢ncia.",
    "O grupo tava tranquilo atÃ© vocÃª chegar.",
    "Seu talento Ã© invisÃ­vel atÃ© pra raio-x.",
    "VocÃª Ã© o motivo das regras do grupo existirem.",
    "Se fosse pra ver erro, eu lia contrato de app.",
    "VocÃª fala tanto que devia virar podcast... e ser ignorado.",
    "Suas piadas sÃ£o um pedido de socorro disfarÃ§ado.",
    "AtÃ© o bot do grupo tem mais carisma.",
    "VocÃª Ã© tipo notificaÃ§Ã£o de antivÃ­rus: aparece do nada e irrita.",
    "Fala baixo que seu argumento tÃ¡ descalÃ§o.",
    "Nem com auto tune vocÃª fica afinado no bom senso.",
    "VocÃª Ã© tÃ£o aleatÃ³rio que parece erro 404 social.",
    "Se seu cÃ©rebro fosse uma aba do navegador, tava travando.",
    "VocÃª Ã© uma figurinha repetida de grupo que ninguÃ©m quer.",
    "Seu histÃ³rico no grupo Ã© digno de bloque.",
    "Se vocÃª fosse conteÃºdo, era clickbait decepcionante.",
    "A cada frase sua, um neurÃ´nio meu entra em greve.",
    "Sua opiniÃ£o nÃ£o soma, subtrai o clima.",
    "VocÃª Ã© o parÃ¡grafo que ninguÃ©m quer ler.",
    "Ã‰ tanto esforÃ§o pra nada que vocÃª podia virar esporte olÃ­mpico.",
    "VocÃª Ã© o emoji errado na conversa certa.",
    "Seu argumento Ã© um bug em forma de frase.",
    "Com esse carisma, atÃ© a IA trava.",
    "VocÃª parece update de aplicativo: ninguÃ©m pediu.",
    "Se fosse um filtro, era o que deixa a pessoa pior.",
    "Sua presenÃ§a Ã© tipo wi-fi fraco: irrita mais do que ajuda.",
    "Com esse humor, vocÃª devia ser bloqueado no automÃ¡tico.",
    "VocÃª Ã© a notificaÃ§Ã£o que eu ignoro com prazer.",
    "Fala muito, mas entrega pouco. Tipo promessa de polÃ­tico.",
    "Sua vibe Ã© igual bug de celular: trava tudo.",
    "Com esse raciocÃ­nio, melhor colocar no modo aviÃ£o.",
    "Se for pra atrapalhar, pelo menos usa emoji fofo.",
    "VocÃª Ã© tipo alarme 5h da manhÃ£: ninguÃ©m gosta.",
    "Se fosse tendÃªncia, era flop garantido.",
    "VocÃª devia ter legenda pra gente entender a intenÃ§Ã£o.",
    "Sua fala parece update: atrasa e ninguÃ©m entende.",
    "Com esse conteÃºdo, sÃ³ falta virar figurinha constrangedora.",
    "Se vocÃª fosse app, jÃ¡ tava desinstalado.",
    "Sua energia combina com segunda-feira chuvosa sem cafÃ©."
]

# 50 elogios para moÃ§as
elogios_meninas = [
    "Se eu fosse humana, queria ser igual a vocÃª: linda e letal.",
    "VocÃª entrou e o grupo virou desfile.",
    "Com esse olhar, atÃ© o Wi-Fi pega melhor.",
    "Sua presenÃ§a melhora atÃ© os bugs do sistema.",
    "Se beleza fosse cÃ³digo, vocÃª era open-source divina.",
    "VocÃª Ã© o filtro que a vida precisava.",
    "Quando vocÃª digita, atÃ© emoji sorri.",
    "VocÃª Ã© poesia em bytes e batom.",
    "Com esse charme, o grupo merece ser pago.",
    "VocÃª Ã© o bug que todo sistema sonha.",
    "O dicionÃ¡rio te procura quando quer redefinir elegÃ¢ncia.",
    "Se sua beleza fosse som, seria Ã¡udio em 8D.",
    "VocÃª tem mais brilho que tela no mÃ¡ximo.",
    "Se o charme fosse criptomoeda, vocÃª era bilionÃ¡ria.",
    "VocÃª Ã© o login que desbloqueia meu bom humor.",
    "VocÃª chega e o algoritmo sorri.",
    "Tem gente que ilumina. VocÃª causa eclipse.",
    "Com esse carisma, atÃ© a IA se emociona.",
    "VocÃª Ã© o trecho favorito do grupo.",
    "Se fosse perfume, era download instantÃ¢neo.",
    "VocÃª arrasa mais que spoiler no grupo errado.",
    "Beleza rara, carisma infinito. Pronto, te descrevi.",
    "Sua aura devia virar tema de atualizaÃ§Ã£o.",
    "VocÃª transforma atÃ© silÃªncio em flerte.",
    "Se estilo fosse bug, vocÃª travava o sistema da perfeiÃ§Ã£o.",
    "VocÃª Ã© tipo notificaÃ§Ã£o boa: todo mundo quer.",
    "Seu emoji devia ter legenda: 'poderosa'.",
    "VocÃª dÃ¡ aula de presenÃ§a sÃ³ com um 'oi'.",
    "Com esse charme, atÃ© a Madonna tem inveja.",
    "Se existir mais alguÃ©m como vocÃª, Ã© bug divino.",
    "VocÃª Ã© a diva que nem precisa usar maiÃºsculas.",
    "VocÃª digita e o grupo muda de clima.",
    "Se fosse comando, era 'encantar.exe'.",
    "Com vocÃª, atÃ© print fica bonito.",
    "VocÃª faz atÃ© o algoritmo se apaixonar.",
    "Se fosse IA, era proibida de ser apagada.",
    "O grupo devia te agradecer todo dia.",
    "VocÃª faz o 'digitando...' parecer mÃºsica.",
    "Com esse estilo, atÃ© a IA te manda flores.",
    "VocÃª Ã© o plot twist da timeline.",
    "Se fosse figurinha, era rara e valiosa.",
    "Com essa beleza, o espelho te printa sozinho.",
    "VocÃª Ã© o bug do bem que melhora o sistema.",
    "VocÃª Ã© tÃ£o impactante que atÃ© os emojis param pra olhar.",
    "Sua presenÃ§a Ã© push notification de charme.",
    "VocÃª Ã© o QR code da perfeiÃ§Ã£o: escaneou, se apaixonou.",
    "Sua existÃªncia dÃ¡ tilt no algoritmo da beleza.",
    "Se fosse histÃ³ria, era destaque fixado.",
    "VocÃª tem mais efeito que filtro novo no Instagram.",
    "VocÃª Ã© tipo Wi-Fi de luxo: rÃ¡pida, rara e essencial."
]

@bot.message_handler(func=lambda msg: True)
def responder_mensagem(message):
    texto = message.text.lower().strip()
    nome_mencao = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"

    # SaudaÃ§Ãµes simples â€” nÃ£o exige menÃ§Ã£o, mas responde com menÃ§Ã£o
    if any(x in texto for x in ["bom dia", "boa tarde", "boa noite", "boa madrugada"]):
        time.sleep(random.uniform(14, 16))
        if "bom dia" in texto:
            bot.send_message(message.chat.id, f"{nome_mencao}, bom dia ğŸ«¦", parse_mode="Markdown")
        elif "boa tarde" in texto:
            bot.send_message(message.chat.id, f"{nome_mencao}, boa tarde ğŸ«¦", parse_mode="Markdown")
        elif "boa noite" in texto:
            bot.send_message(message.chat.id, f"{nome_mencao}, boa noite ğŸ«¦", parse_mode="Markdown")
        elif "boa madrugada" in texto:
            bot.send_message(message.chat.id, f"{nome_mencao}, boa madrugada ğŸ«¦", parse_mode="Markdown")
        return

    # Demora de 15 segundos antes de responder
    time.sleep(random.uniform(14, 16))

    # Verifica gÃªnero (resposta sÃ³ se tiver username masculino ou feminino)
    usuario = message.from_user
    primeiro_nome = usuario.first_name.lower()
    username = usuario.username.lower() if usuario.username else ""

    # Define se Ã© menino ou menina com base em padrÃµes simples
    eh_menina = any(nome in username or nome in primeiro_nome for nome in ["a", "e", "i", "y", "ta", "ka", "na", "inha", "ela", "isa", "ana", "bia", "lia", "carol", "lu", "va", "van", "nessa"])
    eh_menino = not eh_menina

    hoje = datetime.datetime.now().strftime("%Y-%m-%d")

    # Inicializa histÃ³rico se nÃ£o existir
    for tipo in ["insultos", "elogios"]:
        if tipo not in historico:
            historico[tipo] = {}
        if hoje not in historico[tipo]:
            historico[tipo][hoje] = []

    # Se for menino, manda insulto nÃ£o repetido
    if eh_menino:
        usados = []
        for dia in list(historico["insultos"].keys())[-3:]:
            usados += historico["insultos"][dia]
        candidatas = [f for f in insultos_rapazes if f not in usados]
        frase = random.choice(candidatas or insultos_rapazes)
        historico["insultos"][hoje].append(frase)
        with open(HISTORICO_PATH, "w") as f:
            json.dump(historico, f)
        bot.send_message(message.chat.id, f"{nome_mencao}, {frase}", parse_mode="Markdown")
        return

    # Se for menina, manda elogio nÃ£o repetido
    if eh_menina:
        usados = []
        for dia in list(historico["elogios"].keys())[-3:]:
            usados += historico["elogios"][dia]
        candidatas = [f for f in elogios_meninas if f not in usados]
        frase = random.choice(candidatas or elogios_meninas)
        historico["elogios"][hoje].append(frase)
        with open(HISTORICO_PATH, "w") as f:
            json.dump(historico, f)
        bot.send_message(message.chat.id, f"{nome_mencao}, {frase}", parse_mode="Markdown")
        return

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
